rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isSameOrg(resourceOrgId) {
      return request.auth != null && resourceOrgId == getUserData(request.auth.uid).orgId;
    }

    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.resource.data.orgId != null;
      allow update: if request.auth != null && request.auth.uid == userId && 
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'email']);
      allow update: if request.auth != null && 
                    getUserData(request.auth.uid).role == 'Admin' && 
                    isSameOrg(resource.data.orgId) && 
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']);
    }

    match /billing/{docId} {
      allow read, write: if request.auth != null && 
                         getUserData(request.auth.uid).role == 'Admin' && 
                         isSameOrg(resource.data.orgId);
    }

    match /aiLab/{aiLabId} {
      allow create: if request.auth != null && request.resource.data.orgId != null;
      allow read: if request.auth != null && isSameOrg(resource.data.orgId);
      allow update, delete: if false;
    }

    match /content/{contentId} {
      allow create: if request.auth != null && 
                    request.resource.data.orgId != null && 
                    (getUserData(request.auth.uid).role == 'Content Creator' || getUserData(request.auth.uid).role == 'Admin');
      allow read: if request.auth != null && isSameOrg(resource.data.orgId);
      allow update: if request.auth != null && isSameOrg(resource.data.orgId) && (
                    (getUserData(request.auth.uid).role == 'Editor' && resource.data.status == 'Draft') ||
                    (getUserData(request.auth.uid).role == 'Reviewer' && resource.data.status == 'Under Review' && request.resource.data.status == 'Changes Requested') ||
                    (getUserData(request.auth.uid).role == 'Approver' && resource.data.status == 'Under Review' && request.resource.data.status == 'Approved')
                  );
      allow delete: if request.auth != null && 
                    getUserData(request.auth.uid).role == 'Admin' && 
                    isSameOrg(resource.data.orgId);
    }

    match /content/{contentId}/comments/{commentId} {
      allow read, create: if request.auth != null && isSameOrg(get(/databases/$(database)/documents/content/$(contentId)).data.orgId);
      allow update, delete: if false;
    }

    match /notifications/{notificationId} {
      allow read: if request.auth != null && isSameOrg(resource.data.orgId);
      allow create: if request.auth != null && request.resource.data.orgId != null && 
                    (getUserData(request.auth.uid).role == 'Admin' || getUserData(request.auth.uid).role == 'Content Creator');
      allow update, delete: if false;
    }
  }
}